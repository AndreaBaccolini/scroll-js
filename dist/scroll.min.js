function __awaiter(e,t,n,o){return new(n||(n=Promise))(function(i,r){function s(e){try{a(o.next(e))}catch(e){r(e)}}function l(e){try{a(o.throw(e))}catch(e){r(e)}}function a(e){e.done?i(e.value):new n(function(t){t(e.value)}).then(s,l)}a((o=o.apply(e,t||[])).next())})}function scrollTo(e,t){return __awaiter(this,void 0,void 0,function*(){if(!(e instanceof Element||e instanceof Window))throw new Error(`element passed to scrollTo() must be either the window or a DOM element, you passed ${e}!`);const n=utils.getDocument();t=sanitizeScrollOptions(t);const o=(t,i,r,s,l=300,a,c)=>{window.requestAnimationFrame(()=>{const u=Date.now(),d=Math.min(1,(u-s)/l);if(t===i)return c?c():null;((t,o)=>{e[t]=o,n.documentElement[t]=o})(r,a(d)*(i-t)+t),d<1?o(e[r],i,r,s,l,a,c):c&&c()})},i=getScrollPosition(e,"y"),r=getScrollPropertyByElement(e,"y");return new Promise(e=>{o(i,t.top,r,Date.now(),t.duration,getEasing(t.easing),e)})})}function scrollIntoView(e,t,n){validateElement(e),!t||t instanceof Element||(n=t,t=void 0);const{top:o,duration:i,easing:r}=sanitizeScrollOptions(n);t=t||utils.getDocument().body;let s=0,l=e?e.offsetTop:0;return t===utils.getDocument().body&&(s=window.pageYOffset,l=e.getBoundingClientRect().top+s),scrollTo(t,{top:l,left:0,duration:i,easing:r})}function validateElement(e){if(void 0===e){throw new Error("The element passed to scrollIntoView() was undefined.")}if(!(e instanceof HTMLElement))throw new Error(`The element passed to scrollIntoView() must be a valid element. You passed ${e}.`)}function getScrollPropertyByElement(e,t){const n={window:{y:"scrollY",x:"scrollX"},element:{y:"scrollTop",x:"scrollLeft"}};return e===utils.getDocument().body?n.element[t]:e instanceof Window?n.window[t]:n.element[t]}function sanitizeScrollOptions(e){return e?("smooth"===e.behavior&&(e.easing="ease-in-out",e.duration=300),"instant"!==e.behavior&&"auto"!==e.behavior||(e.duration=0),e):{}}function getScrollPosition(e,t){const n=utils.getDocument(),o=getScrollPropertyByElement(e,t);return e===n.body?n.body[o]||n.documentElement[o]:e instanceof Window?window[o]:e[o]}const utils={getDocument:()=>document},easingMap={linear:e=>e,"ease-in":e=>e*e,"ease-out":e=>e*(2-e),"ease-in-out":e=>e<.5?2*e*e:(4-2*e)*e-1},getEasing=e=>{const t=easingMap[e||"linear"];if(!t){const t=Object.keys(easingMap).join(",");throw new Error(`Scroll error: scroller does not support an easing option of "${e}". Supported options are ${t}`)}return t};export{scrollTo,scrollIntoView,utils,easingMap};
